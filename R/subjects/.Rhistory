q()
library('testthat')
#library('testthat')
library('ggplot2')
install.packages(c("testthat", "ggplot2"))
named.colors <- c('red', 'green', 'blue')
fix(named.colors)
trial.types <- c('Congruous', 'Incongruous')
tasks <- c('Name Color', 'Name Word')
results <- data.frame()
cat('\n\n\n\n\n\n\n')
cat('\n\n\n\n\n\n\n')
cat('\n\n\n\n\n\n\n')
source('~/Desktop/stroop.R')
sample(seq(0, 1, by=1))
sample(seq(from=0, to=1, by=1), size = 20)
sample(seq(from=0, to=1, by=1), size = 10)
sample(seq(from=0, to=1, by=1), size = 10, replace=TRUE)
sample(union(rep(0,10), rep(0,10)), 20, replace=FALSE)
union(rep(0,10), rep(0,10))
union(rep(0,10), rep(1,10))
rep(0,10) + rep(1,10)
rep(0,10) : rep(1,10)
append(rep(0,10), rep(1,10))
sample(append(rep(0,10), rep(1,10)), 20, replace=FALSE)
sample(append(rep(0,10), rep(1,10)), 20, replace=FALSE)
sample(append(rep(0,10), rep(1,10)), 20, replace=FALSE)
sample(append(rep(0,10), rep(1,10)), 20, replace=FALSE)
sample(append(rep(0,10), rep(1,10)), 20, replace=FALSE)
sample(append(rep(0,10), rep(1,10)), 20, replace=FALSE)
install.packages("swirl")
install.packages("swirl")
error <- read.delim("/home/campus/nodejsHome/guaita/log/error.csv", header=F)
View(error)
error <- read.delim("/home/campus/nodejsHome/guaita/log/error.csv", header=F)
View(error)
error <- read.delim("/home/campus/nodejsHome/guaita/log/error.csv", header=F)
names(error) <- c("frontend","date","call", "error", "class")
error$date <- strptime(error$date, format = "%Y/%m/%d %H:%M:%S")
error$hour <- cut(error$date, breaks = "hour")
error[order(error$date),]
error <- error[order(error$date),]
View(error)
View(error)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
AppliedPredictiveModeling
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(adData)
adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
factorCement = cut2(mixtures$Cement, levels.mean=TRUE)
factorFlyAsh = cut2(mixtures$FlyAsh, levels.mean=TRUE)
factorAge = cut2(mixtures$Age, levels.mean=TRUE)
factorAge
plot (mixtures$CompressiveStrength, col=c(factorAge))
plot (mixtures$CompressiveStrength, col=c(factorFlyAsh))
plot (mixtures$CompressiveStrength, col=c(factorAge))
plot (mixtures$CompressiveStrength, col=c(factorFlyAsh))
plot (mixtures$CompressiveStrength, col=c(factorAge))
View(mixtures)
qplot(CompressiveStrength,seq_along(CompressiveStrength),data=training,colour=Age)
mixtures$mixRows <- as.numeric(rownames(mixtures))
plot(as.numeric(rownames(mixtures)), mixtures$CompressiveStrength)
lmFlyAsh <- lm(CompressiveStrength ~ mixRows + FlyAsh, mixtures)
lmAge <- lm(CompressiveStrength ~ mixRows + Age, mixtures)
lmMix <- lm(CompressiveStrength ~ ., mixtures)
summary(lmFlyAsh)
summary(lmAge)
summary(lmMix)
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = Cement, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = BlastFurnaceSlag, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = FlyAsh, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = Water, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = Superplasticizer, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = CoarseAggregate, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = FineAggregate, data = training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, col = Age, data = training)
library(lattice)
attach(mtcars)
# create factors with value labels
gear.f<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# kernel density plot
densityplot(~mpg,
main="Density Plot",
xlab="Miles per Gallon")
xyplot(mpg)
xyplot([1,2,3])
library(lattice)
panel.smoother <- function(x, y) {
panel.xyplot(x, y) # show points
panel.loess(x, y)  # show smoothed line
}
attach(mtcars)
hp <- cut(hp,3) # divide horse power into three bands
xyplot(mpg~wt|hp, scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Weight", ylab="Miles per Gallon",
main="MGP vs Weight by Horse Power")
a <- xyplot(mpg~wt|hp, scales=list(cex=.8, col="red"),
+        panel=panel.smoother,
+        xlab="Weight", ylab="Miles per Gallon",
+        main="MGP vs Weight by Horse Power")
a <- xyplot(mpg~wt|hp, scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Weight", ylab="Miles per Gallon",
main="MGP vs Weight by Horse Power")
typeof(a)
a$type
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
class(a)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = log(Superplasticizer))) + geom_histogram() + theme_bw()
View(training)
ggplot(data = training, aes(x = log(Superplasticizer))) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
setwd("~/Dropbox/uoc/la/data/R/subjects")
shiny::runApp()
shiny::runApp()
